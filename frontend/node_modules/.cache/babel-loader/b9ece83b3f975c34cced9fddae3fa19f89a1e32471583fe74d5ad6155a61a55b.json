{"ast":null,"code":"var _jsxFileName = \"/Users/jasonramirez/Desktop/fitness-app/frontend/src/components/UserProgressChart.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nimport { Chart, registerables } from 'chart.js';\nimport 'chartjs-plugin-annotation';\nimport workoutServices from '../services/workouts';\nimport './UserProgressChart.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserProgressChart = _ref => {\n  _s();\n  let {\n    targetMuscles\n  } = _ref;\n  const [userExercises, setUserExercises] = useState([]);\n  const [filteredUserExercises, setFilteredUserExercises] = useState([]);\n  const [userExerciseClusters, setUserExerciseClusters] = useState([]);\n  const [currentExercise, setCurrentExercise] = useState('');\n  const chartCanvasRef = useRef(null);\n  const chartInstanceRef = useRef(null);\n  useEffect(() => {\n    const fetchUserWorkouts = async () => {\n      const userExercisesTemp = await workoutServices.getUserWorkoutExercises();\n      setUserExercises(userExercisesTemp);\n      setFilteredUserExercises(userExercisesTemp);\n      const userExerciseClustersTemp = await workoutServices.getUserClusters(userExercisesTemp[0].toLowerCase());\n      setCurrentExercise(userExercisesTemp[0]);\n      setUserExerciseClusters(userExerciseClustersTemp);\n    };\n    fetchUserWorkouts();\n  }, []);\n  useEffect(() => {\n    const renderExerciseChart = () => {\n      if (chartInstanceRef.current) {\n        // Destroy the existing chart instance if it exists\n        chartInstanceRef.current.destroy();\n      }\n      Chart.register(...registerables);\n      const ctx = chartCanvasRef.current.getContext('2d');\n      const chart = new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: userExerciseClusters.map(cluster => new Date(cluster.createdAt).toLocaleDateString()),\n          datasets: [{\n            label: 'Reps',\n            data: userExerciseClusters.map(cluster => cluster.cluster.reps),\n            backgroundColor: 'rgba(0, 275, 275, 0.5)',\n            borderColor: 'rgb(225, 0, 0)',\n            borderCapStyle: 'butt',\n            borderWidth: 2,\n            pointBackgroundColor: 'rgba(0, 275, 275)'\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              type: 'linear',\n              beginAtZero: true\n            }\n          },\n          elements: {\n            point: {\n              radius: 5\n            }\n          }\n        }\n      });\n      chartInstanceRef.current = chart;\n    };\n    renderExerciseChart();\n  }, [userExerciseClusters]);\n  const includesIgnoreCase = (array, searchItem) => {\n    return array.some(item => item.toLowerCase() === searchItem.toLowerCase());\n  };\n  const handleExerciseInputChange = async event => {\n    const userExerciseInputValue = event.target.value.toLowerCase();\n    const filteredUserExercisesTemp = userExercises.filter(exercise => exercise.toLowerCase().startsWith(userExerciseInputValue));\n    setFilteredUserExercises(filteredUserExercisesTemp);\n    if (includesIgnoreCase(userExercises, userExerciseInputValue)) {\n      const userExerciseClustersTemp = await workoutServices.getUserClusters(userExerciseInputValue);\n      setUserExerciseClusters(userExerciseClustersTemp);\n      setCurrentExercise(userExerciseClustersTemp[0].cluster.exercise.name);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"user-progress\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"choose-exercise\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"\",\n        children: \"Exercise: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        list: \"exercises-list\",\n        id: \"exercises\",\n        placeholder: \"Choose an exercise...\",\n        onChange: handleExerciseInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n        id: \"exercises-list\",\n        children: filteredUserExercises.map((exercise, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          children: [\" \", exercise, \" \"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        id: \"exercise-label\",\n        children: [\" \", `Current Exercise: ${currentExercise}`]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-progress-chart\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"exerciseProgressChart\",\n        ref: chartCanvasRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n};\n_s(UserProgressChart, \"G3Ok+k9aqj+lIP9Q9tz59o+P3jQ=\");\n_c = UserProgressChart;\nexport default UserProgressChart;\nvar _c;\n$RefreshReg$(_c, \"UserProgressChart\");","map":{"version":3,"names":["useState","useEffect","useRef","Chart","registerables","workoutServices","jsxDEV","_jsxDEV","UserProgressChart","_ref","_s","targetMuscles","userExercises","setUserExercises","filteredUserExercises","setFilteredUserExercises","userExerciseClusters","setUserExerciseClusters","currentExercise","setCurrentExercise","chartCanvasRef","chartInstanceRef","fetchUserWorkouts","userExercisesTemp","getUserWorkoutExercises","userExerciseClustersTemp","getUserClusters","toLowerCase","renderExerciseChart","current","destroy","register","ctx","getContext","chart","type","data","labels","map","cluster","Date","createdAt","toLocaleDateString","datasets","label","reps","backgroundColor","borderColor","borderCapStyle","borderWidth","pointBackgroundColor","options","responsive","maintainAspectRatio","scales","y","beginAtZero","elements","point","radius","includesIgnoreCase","array","searchItem","some","item","handleExerciseInputChange","event","userExerciseInputValue","target","value","filteredUserExercisesTemp","filter","exercise","startsWith","name","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","list","id","placeholder","onChange","index","ref","_c","$RefreshReg$"],"sources":["/Users/jasonramirez/Desktop/fitness-app/frontend/src/components/UserProgressChart.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react'\nimport { Chart, registerables } from 'chart.js'\nimport 'chartjs-plugin-annotation';\nimport workoutServices from '../services/workouts'\nimport './UserProgressChart.css'\n\nconst UserProgressChart = ( {targetMuscles} ) => {\n    const [userExercises, setUserExercises] = useState([])\n    const [filteredUserExercises, setFilteredUserExercises] = useState([])\n    const [userExerciseClusters, setUserExerciseClusters] = useState([])\n    const [currentExercise, setCurrentExercise] = useState('')\n    const chartCanvasRef = useRef(null)\n    const chartInstanceRef = useRef(null);\n\n    useEffect(() => {\n        const fetchUserWorkouts = async () => {\n            const userExercisesTemp = await workoutServices.getUserWorkoutExercises()\n            setUserExercises(userExercisesTemp)\n            setFilteredUserExercises(userExercisesTemp)\n\n            const userExerciseClustersTemp =  await workoutServices.getUserClusters(userExercisesTemp[0].toLowerCase())\n            setCurrentExercise(userExercisesTemp[0])\n            setUserExerciseClusters(userExerciseClustersTemp)\n        }\n        fetchUserWorkouts()\n\n    }, [])\n\n    useEffect(() => {\n        const renderExerciseChart = () => {\n            if (chartInstanceRef.current) {\n                // Destroy the existing chart instance if it exists\n                chartInstanceRef.current.destroy();\n              }\n            Chart.register(...registerables);\n            const ctx = chartCanvasRef.current.getContext('2d')\n            const chart = new Chart(ctx, {\n                type: 'line',\n                data: {\n                    labels: userExerciseClusters.map( cluster => new Date(cluster.createdAt).toLocaleDateString() ),\n                    datasets: [\n                        {\n                            label: 'Reps',\n                            data: userExerciseClusters.map(cluster => cluster.cluster.reps),\n                            backgroundColor: 'rgba(0, 275, 275, 0.5)',\n                            borderColor: 'rgb(225, 0, 0)',\n                            borderCapStyle: 'butt',\n                            borderWidth: 2,\n                            pointBackgroundColor: 'rgba(0, 275, 275)',\n                        }\n                    ]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            type: 'linear',\n                            beginAtZero: true,\n                        },\n                    },\n                    elements: {\n                        point: {\n                            radius: 5,\n                        }\n                    },\n                }\n            })\n            chartInstanceRef.current = chart;\n        }\n\n        renderExerciseChart()\n    }, [userExerciseClusters])\n\n    const includesIgnoreCase = (array, searchItem) => {\n        return array.some((item) => item.toLowerCase() === searchItem.toLowerCase())\n    }\n\n    const handleExerciseInputChange = async (event) => {        \n        const userExerciseInputValue = event.target.value.toLowerCase()\n        const filteredUserExercisesTemp = userExercises.filter( exercise => \n            exercise.toLowerCase().startsWith(userExerciseInputValue)\n        )\n        setFilteredUserExercises(filteredUserExercisesTemp)\n        if (includesIgnoreCase(userExercises, userExerciseInputValue)) {\n            const userExerciseClustersTemp = await workoutServices.getUserClusters(userExerciseInputValue)\n            setUserExerciseClusters(userExerciseClustersTemp)\n            setCurrentExercise(userExerciseClustersTemp[0].cluster.exercise.name)\n        }\n    }\n    \n    return (\n        <div className=\"user-progress\" >\n            <div className=\"choose-exercise\">\n                <label htmlFor=\"\">Exercise: </label>\n                <input list=\"exercises-list\"\n                        id=\"exercises\" \n                        placeholder='Choose an exercise...' \n                        onChange={handleExerciseInputChange}\n                />\n                <datalist id=\"exercises-list\">\n                    {filteredUserExercises.map( (exercise, index) => (\n                        <option key={index}> {exercise} </option>\n                    ))}\n                </datalist>\n                <label id=\"exercise-label\"> {`Current Exercise: ${currentExercise}`}</label>\n            </div>\n            <div className=\"user-progress-chart\">\n                <canvas id=\"exerciseProgressChart\" ref={chartCanvasRef}></canvas>\n            </div>\n        </div>\n    )\n}\n\nexport default UserProgressChart"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}