{"ast":null,"code":"var _jsxFileName = \"/Users/jasonramirez/Desktop/fitness-app/frontend/src/components/UserProgressChart.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useUserValue } from '../UserContext';\nimport Chart from 'chart.js';\nimport workoutServices from '../services/workouts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserProgressChart = _ref => {\n  _s();\n  let {\n    targetMuscles\n  } = _ref;\n  const [userExercises, setUserExercises] = useState([]);\n  const [filteredUserExercises, setFilteredUserExercises] = useState([]);\n  const [userExerciseClusters, setUserExerciseClusters] = useState([]);\n  useEffect(() => {\n    const fetchUserWorkouts = async () => {\n      const userExercisesTemp = await workoutServices.getUserWorkoutExercises();\n      setUserExercises(userExercisesTemp);\n      setFilteredUserExercises(userExercisesTemp);\n    };\n    fetchUserWorkouts();\n  }, []);\n  useEffect(() => {}, [userExerciseClusters]);\n  const handleExerciseInputChange = async event => {\n    const userExerciseInputValue = event.target.value.toLowerCase();\n    const filteredUserExercisesTemp = userExercises.filter(exercise => exercise.toLowerCase().startsWith(userExerciseInputValue));\n    setFilteredUserExercises(filteredUserExercisesTemp);\n    if (userExercises.includes(userExerciseInputValue)) {\n      const userExerciseClustersTemp = await workoutServices.getUserClusters(userExerciseInputValue);\n      setUserExerciseClusters(userExerciseClustersTemp);\n    }\n  };\n  //TODO: get users clusters that contain an exercise for selected muscle group (1 cluster per workout for simplicity)\n  //also get the workout.createdAt parameter along with the cluster object (technically you just need the reps for this chart)\n  //Then create chart using workout.createdAt (x-axis) and, for now, cluster.reps (y-axis)\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"\",\n      children: \"Exercise: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      list: \"exercises-list\",\n      id: \"exercises\",\n      placeholder: \"Choose an exercise...\",\n      onChange: handleExerciseInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n      id: \"exercises-list\",\n      children: filteredUserExercises.map(exercise => /*#__PURE__*/_jsxDEV(\"option\", {\n        children: [\" \", exercise, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n_s(UserProgressChart, \"50vRPvoMffCaqgxMYc3S5y7V9uM=\");\n_c = UserProgressChart;\nexport default UserProgressChart;\nvar _c;\n$RefreshReg$(_c, \"UserProgressChart\");","map":{"version":3,"names":["useState","useEffect","useUserValue","Chart","workoutServices","jsxDEV","_jsxDEV","UserProgressChart","_ref","_s","targetMuscles","userExercises","setUserExercises","filteredUserExercises","setFilteredUserExercises","userExerciseClusters","setUserExerciseClusters","fetchUserWorkouts","userExercisesTemp","getUserWorkoutExercises","handleExerciseInputChange","event","userExerciseInputValue","target","value","toLowerCase","filteredUserExercisesTemp","filter","exercise","startsWith","includes","userExerciseClustersTemp","getUserClusters","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","list","id","placeholder","onChange","map","_c","$RefreshReg$"],"sources":["/Users/jasonramirez/Desktop/fitness-app/frontend/src/components/UserProgressChart.js"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport { useUserValue } from '../UserContext'\nimport Chart from 'chart.js'\nimport workoutServices from '../services/workouts'\n\nconst UserProgressChart = ( {targetMuscles} ) => {\n    const [userExercises, setUserExercises] = useState([])\n    const [filteredUserExercises, setFilteredUserExercises] = useState([])\n    const [userExerciseClusters, setUserExerciseClusters] = useState([])\n\n    useEffect(() => {\n        const fetchUserWorkouts = async () => {\n            const userExercisesTemp = await workoutServices.getUserWorkoutExercises()\n            setUserExercises(userExercisesTemp)\n            setFilteredUserExercises(userExercisesTemp)\n        }\n        fetchUserWorkouts()\n    }, [])\n\n    useEffect(() => {\n\n    }, [userExerciseClusters])\n\n    const handleExerciseInputChange = async (event) => {\n        const userExerciseInputValue = event.target.value.toLowerCase()\n        const filteredUserExercisesTemp = userExercises.filter( exercise => \n            exercise.toLowerCase().startsWith(userExerciseInputValue)\n        )\n        setFilteredUserExercises(filteredUserExercisesTemp)\n        if (userExercises.includes(userExerciseInputValue)) {\n            const userExerciseClustersTemp = await workoutServices.getUserClusters(userExerciseInputValue)\n            setUserExerciseClusters(userExerciseClustersTemp)\n        }\n    }\n    //TODO: get users clusters that contain an exercise for selected muscle group (1 cluster per workout for simplicity)\n    //also get the workout.createdAt parameter along with the cluster object (technically you just need the reps for this chart)\n    //Then create chart using workout.createdAt (x-axis) and, for now, cluster.reps (y-axis)\n    return (\n        <div>\n            <label htmlFor=\"\">Exercise: </label>\n            <input list=\"exercises-list\" id=\"exercises\" \n            placeholder='Choose an exercise...' onChange={handleExerciseInputChange}/>\n            <datalist id=\"exercises-list\">\n                {filteredUserExercises.map( exercise => (\n                    <option> {exercise} </option>\n                ))}\n            </datalist>\n        </div>\n    )\n}\n\nexport default UserProgressChart"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,OAAOC,KAAK,MAAM,UAAU;AAC5B,OAAOC,eAAe,MAAM,sBAAsB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,iBAAiB,GAAGC,IAAA,IAAuB;EAAAC,EAAA;EAAA,IAArB;IAACC;EAAa,CAAC,GAAAF,IAAA;EACvC,MAAM,CAACG,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACa,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtE,MAAM,CAACe,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAEpEC,SAAS,CAAC,MAAM;IACZ,MAAMgB,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MAClC,MAAMC,iBAAiB,GAAG,MAAMd,eAAe,CAACe,uBAAuB,EAAE;MACzEP,gBAAgB,CAACM,iBAAiB,CAAC;MACnCJ,wBAAwB,CAACI,iBAAiB,CAAC;IAC/C,CAAC;IACDD,iBAAiB,EAAE;EACvB,CAAC,EAAE,EAAE,CAAC;EAENhB,SAAS,CAAC,MAAM,CAEhB,CAAC,EAAE,CAACc,oBAAoB,CAAC,CAAC;EAE1B,MAAMK,yBAAyB,GAAG,MAAOC,KAAK,IAAK;IAC/C,MAAMC,sBAAsB,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAACC,WAAW,EAAE;IAC/D,MAAMC,yBAAyB,GAAGf,aAAa,CAACgB,MAAM,CAAEC,QAAQ,IAC5DA,QAAQ,CAACH,WAAW,EAAE,CAACI,UAAU,CAACP,sBAAsB,CAAC,CAC5D;IACDR,wBAAwB,CAACY,yBAAyB,CAAC;IACnD,IAAIf,aAAa,CAACmB,QAAQ,CAACR,sBAAsB,CAAC,EAAE;MAChD,MAAMS,wBAAwB,GAAG,MAAM3B,eAAe,CAAC4B,eAAe,CAACV,sBAAsB,CAAC;MAC9FN,uBAAuB,CAACe,wBAAwB,CAAC;IACrD;EACJ,CAAC;EACD;EACA;EACA;EACA,oBACIzB,OAAA;IAAA2B,QAAA,gBACI3B,OAAA;MAAO4B,OAAO,EAAC,EAAE;MAAAD,QAAA,EAAC;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAQ,eACpChC,OAAA;MAAOiC,IAAI,EAAC,gBAAgB;MAACC,EAAE,EAAC,WAAW;MAC3CC,WAAW,EAAC,uBAAuB;MAACC,QAAQ,EAAEtB;IAA0B;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAE,eAC1EhC,OAAA;MAAUkC,EAAE,EAAC,gBAAgB;MAAAP,QAAA,EACxBpB,qBAAqB,CAAC8B,GAAG,CAAEf,QAAQ,iBAChCtB,OAAA;QAAA2B,QAAA,GAAQ,GAAC,EAACL,QAAQ,EAAC,GAAC;MAAA;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACvB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACK;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACT;AAEd,CAAC;AAAA7B,EAAA,CA5CKF,iBAAiB;AAAAqC,EAAA,GAAjBrC,iBAAiB;AA8CvB,eAAeA,iBAAiB;AAAA,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}