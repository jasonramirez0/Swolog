{"ast":null,"code":"var _jsxFileName = \"/Users/jasonramirez/Desktop/fitness-app/frontend/src/components/WorkoutLogPage.js\",\n  _s2 = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport Header from '../components/Header';\nimport Notification from '../components/Notification';\nimport { useErrorMessageDispatch } from '../ErrorMessageContext';\nimport exerciseServices from '../services/exercises';\nimport workoutServices from '../services/workouts';\nimport workoutChatbotServices from '../services/workoutChatbot';\nimport './WorkoutLogPage.css';\nimport { useRef } from 'react';\n\n// Defines page where a user can log their workout\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WorkoutLogPage = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  /* UserPage state variables and updater functions */\n  const [exercises, setExercises] = useState([]);\n  const [workout, setWorkout] = useState({\n    clusters: []\n  });\n  const [currWeight, setCurrWeight] = useState(0);\n  const [currSets, setCurrSets] = useState(0);\n  const [currReps, setCurrReps] = useState(0);\n  const [filteredExercises, setFilteredExercises] = useState([]);\n  const errorMessageDispatch = useErrorMessageDispatch();\n\n  /* Gets and sets all of the exercises from the backend */\n  useEffect(() => {\n    exerciseServices.getAll().then(exercises => {\n      setExercises(exercises);\n    });\n  }, []);\n  const handleWeightChange = event => {\n    event.preventDefault();\n    setCurrWeight(event.target.value);\n  };\n  const handleSetChange = event => {\n    event.preventDefault();\n    setCurrSets(event.target.value);\n  };\n  const handleRepChange = event => {\n    event.preventDefault();\n    setCurrReps(event.target.value);\n  };\n  const addCluster = event => {\n    event.preventDefault();\n    const [exercise, weight, sets, reps] = [event.target.elements.exercises.value, event.target.elements.weight.value, event.target.elements.sets.value, event.target.elements.reps.value];\n    if (!exercises.some(exerciseObject => exerciseObject.name.toLowerCase() === exercise.toLowerCase())) {\n      errorMessageDispatch({\n        type: \"SET_ERROR\",\n        message: \"Exercise entered not valid. Please choose an exercise from the provided list.\"\n      });\n      return;\n    }\n    const newCluster = {\n      'exercise': exercise,\n      'weight': weight,\n      'sets': sets,\n      'reps': reps\n    };\n    if (workout.clusters.length !== 0) {\n      setWorkout({\n        clusters: [...workout.clusters, newCluster]\n      });\n    } else {\n      setWorkout({\n        clusters: [newCluster]\n      });\n    }\n\n    /*\n    // Creates new workout with this cluster if first cluster of the workout\n    if (Object.keys(workout).length === 0) {\n    \tworkoutServices\n    \t\t.create([newCluster])\n    \t\t.then(createdWorkout => {\t\t\t\n    \t\t\tsetWorkout({...createdWorkout})\n    \t\t\tconsole.log(workout.clusters)\n    \t\t})\t    \n    } else {\n    \t// Adds cluster to previously existing workout\t\n    \tconst updatedWorkout = {...workout, clusters: workout.clusters.concat(newCluster)}\n    \tworkoutServices\n    \t\t.update(workout.id, updatedWorkout)\n    \t\t.then(updatedWorkout => {\t\t\t\n    \t\t\tsetWorkout(updatedWorkout)\n    \t\t})\n    }*/\n  };\n\n  const ClusterList = () => {\n    if (Object.keys(workout).length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"noClustersPrompt\",\n        children: \" Add your first exercise for this workout! \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Exercise\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Weight\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Sets\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Reps\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 7\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: workout.clusters.map((cluster, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: cluster.exercise\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: cluster.weight\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: cluster.sets\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: cluster.reps\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 9\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 8\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 5\n      }, this);\n    }\n  };\n  const handleExerciseInputChange = event => {\n    event.preventDefault();\n    const userInputValue = event.target.value.toLowerCase();\n    const filteredExercisesTemp = exercises.filter(exercise => exercise.name.toLowerCase().startsWith(userInputValue));\n    setFilteredExercises(filteredExercisesTemp);\n  };\n  const saveWorkout = async event => {\n    event.preventDefault();\n    console.log('save workout');\n    try {\n      await workoutServices.create(workout.clusters);\n      setWorkout({\n        clusters: []\n      });\n    } catch (error) {\n      console.log('error saving workout');\n    }\n  };\n\n  // Implements chat interface through which user can specify workout parameters and get a workout generated via ChatGPT\n  const ChatInterface = () => {\n    _s();\n    const [chatMessages, setChatMessages] = useState(['Hi there! I\\'m ChatGPTrainer. Specify the type of workout you want me to generate (target muscles, intensity, your physical condition, etc.) ']);\n    const [currentChatMessage, setCurrentChatMessage] = useState('');\n    const [generatedClusters, setGeneratedClusters] = useState([]);\n    const messagesEndRef = useRef(null);\n    const scrollToBottom = () => {\n      var _messagesEndRef$curre;\n      (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n    useEffect(scrollToBottom, [chatMessages]);\n    const handleChatInputChange = event => {\n      event.preventDefault();\n      setCurrentChatMessage(event.target.value);\n    };\n\n    // Handles different user message input provided via the chat interface\n    const sendChatMessage = async event => {\n      event.preventDefault();\n\n      // Workout has already been generated, in this case user may either add or clear current generated workout\n      if (generatedClusters.length !== 0) {\n        const userCommand = currentChatMessage.toLowerCase();\n        if (userCommand === 'add') {\n          try {\n            workoutServices.create(generatedClusters).then(createdWorkout => {\n              setWorkout({\n                ...createdWorkout\n              });\n              console.log(workout.clusters);\n            });\n          } catch (error) {\n            console.log('error adding generated workout');\n          }\n          console.log('generated workout successfully added');\n          setGeneratedClusters([]);\n        }\n        // Clears most recently generated workout\n        else if (userCommand === 'clear') {\n          setGeneratedClusters([]);\n          setChatMessages(prevChatMessages => [...prevChatMessages, 'Specify the type of workout you want me to generate (target muscles, intensity, your physical condition, etc.)']);\n        }\n        // Handles invalid entries\n        else {\n          setChatMessages(prevChatMessages => [...prevChatMessages, 'Invalid entry.']);\n          setChatMessages(prevChatMessages => [...prevChatMessages, 'Type \\'add\\' to add this workout to your current workout, or \\`clear\\` to generate a new one']);\n        }\n        return;\n      }\n      // Handles case of when workout has not been generated yet and chatGPTrainer is waiting for user specifications about their desired workout\n      setChatMessages(prevChatMessages => [...prevChatMessages, currentChatMessage]);\n      setChatMessages(prevChatMessages => [...prevChatMessages, \"Please wait while I generate your personalized workout...\"]);\n      setCurrentChatMessage('');\n      const generatedWorkout = await workoutChatbotServices.generateWorkout(currentChatMessage);\n      const modifiedGeneratedWorkout = generatedWorkout.map(cluster => {\n        const currExercise = cluster.exerciseName;\n        const weight = cluster['weight in lbs'];\n        const sets = cluster.sets;\n        const reps = cluster.reps;\n        return {\n          exercise: currExercise,\n          weight: weight,\n          sets: sets,\n          reps: reps\n        };\n      });\n      setGeneratedClusters(modifiedGeneratedWorkout);\n      const exerciseMessages = modifiedGeneratedWorkout.map(cluster => {\n        return `Exercise: ${cluster.exercise} weight: ${cluster.weight}lbs sets: ${cluster.sets} reps: ${cluster.reps}`;\n      });\n      setChatMessages(prevChatMessages => [...prevChatMessages, ...exerciseMessages]);\n      setChatMessages(prevChatMessages => [...prevChatMessages, 'Is this workout to your liking? If so let me know so I can add it to your current workout']);\n      setChatMessages(prevChatMessages => [...prevChatMessages, 'Type \\'add\\' to add this workout to your current workout, or \\`clear\\` to generate a new one']);\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-interface\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"ChatGPTrainer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages\",\n        style: {\n          overflow: 'auto',\n          height: '350px'\n        },\n        children: [chatMessages.map((message, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: message\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 7\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"message-form\",\n        onSubmit: sendChatMessage,\n        style: {\n          display: 'flex'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: currentChatMessage,\n          onChange: handleChatInputChange,\n          placeholder: \"Type your message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 4\n    }, this);\n  };\n  _s(ChatInterface, \"Cgx3T9epqXsh8uDv5WolK0jGa6g=\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"user-main\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"log-chat\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-log\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Current Workout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Notification, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: addCluster,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"exercise\",\n              children: \"Exercise\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              list: \"exercise-list\",\n              id: \"exercises\",\n              placeholder: \"Type to search...\",\n              onChange: handleExerciseInputChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n              id: \"exercise-list\",\n              children: filteredExercises.map(exercise => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: exercise.name\n              }, exercise.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 10\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"sets-reps\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"weight\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"weight\",\n                children: \"Weight(lbs)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 254,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                id: \"weight\",\n                value: currWeight,\n                onChange: handleWeightChange,\n                children: [...Array(100).keys()].map(num => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: 2.5 * (num + 1),\n                  children: 2.5 * (num + 1)\n                }, num + 1, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 257,\n                  columnNumber: 11\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 255,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sets\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"sets\",\n                children: \"Sets\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                id: \"sets\",\n                value: currSets,\n                onChange: handleSetChange,\n                children: [...Array(20).keys()].map(num => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: num + 1,\n                  children: num + 1\n                }, num + 1, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 267,\n                  columnNumber: 11\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"reps\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"reps\",\n                children: \"Reps\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 274,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                id: \"reps\",\n                value: currReps,\n                onChange: handleRepChange,\n                children: [...Array(50).keys()].map(num => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: num + 1,\n                  children: num + 1\n                }, num + 1, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 277,\n                  columnNumber: 11\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 275,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \" Add \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(ClusterList, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: saveWorkout,\n          type: \"submit\",\n          children: \"Save Workout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(ChatInterface, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 3\n  }, this);\n};\n_s2(WorkoutLogPage, \"znustqI/QdnRp8Da2dGi1GtQmoA=\", false, function () {\n  return [useErrorMessageDispatch];\n});\n_c = WorkoutLogPage;\nexport default WorkoutLogPage;\nvar _c;\n$RefreshReg$(_c, \"WorkoutLogPage\");","map":{"version":3,"names":["useState","useEffect","Header","Notification","useErrorMessageDispatch","exerciseServices","workoutServices","workoutChatbotServices","useRef","jsxDEV","_jsxDEV","WorkoutLogPage","_s2","_s","$RefreshSig$","exercises","setExercises","workout","setWorkout","clusters","currWeight","setCurrWeight","currSets","setCurrSets","currReps","setCurrReps","filteredExercises","setFilteredExercises","errorMessageDispatch","getAll","then","handleWeightChange","event","preventDefault","target","value","handleSetChange","handleRepChange","addCluster","exercise","weight","sets","reps","elements","some","exerciseObject","name","toLowerCase","type","message","newCluster","length","ClusterList","Object","keys","htmlFor","children","fileName","_jsxFileName","lineNumber","columnNumber","map","cluster","index","handleExerciseInputChange","userInputValue","filteredExercisesTemp","filter","startsWith","saveWorkout","console","log","create","error","ChatInterface","chatMessages","setChatMessages","currentChatMessage","setCurrentChatMessage","generatedClusters","setGeneratedClusters","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleChatInputChange","sendChatMessage","userCommand","createdWorkout","prevChatMessages","generatedWorkout","generateWorkout","modifiedGeneratedWorkout","currExercise","exerciseName","exerciseMessages","className","style","overflow","height","ref","id","onSubmit","display","onChange","placeholder","list","Array","num","onClick","_c","$RefreshReg$"],"sources":["/Users/jasonramirez/Desktop/fitness-app/frontend/src/components/WorkoutLogPage.js"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport Header from '../components/Header'\nimport Notification from '../components/Notification'\nimport { useErrorMessageDispatch } from '../ErrorMessageContext'\nimport exerciseServices from '../services/exercises'\nimport workoutServices from '../services/workouts'\nimport workoutChatbotServices from '../services/workoutChatbot'\nimport './WorkoutLogPage.css'\nimport { useRef } from 'react'\n\n// Defines page where a user can log their workout\nconst WorkoutLogPage = () => {\t\n\t/* UserPage state variables and updater functions */\n\tconst [exercises, setExercises] = useState([])\n\tconst [workout, setWorkout] = useState({clusters: []})\n\tconst [currWeight, setCurrWeight] = useState(0)\n\tconst [currSets, setCurrSets] = useState(0)\n\tconst [currReps, setCurrReps] = useState(0)\n\tconst [filteredExercises, setFilteredExercises] = useState([])\n\tconst errorMessageDispatch = useErrorMessageDispatch()\n\t\n\t/* Gets and sets all of the exercises from the backend */\n\tuseEffect(() => {\n\t\texerciseServices\n\t\t\t.getAll()\n\t\t\t.then(exercises => {\n\t\t\t\tsetExercises(exercises)\n\t\t\t})\n\t}, [])\n\n\tconst handleWeightChange = (event) => {\n\t\tevent.preventDefault()\n\t\tsetCurrWeight(event.target.value)\n\t}\n\tconst handleSetChange = (event) => {\t\n\t\tevent.preventDefault()\n\t\tsetCurrSets(event.target.value)\n\t}\n\n\tconst handleRepChange = (event) => {\n\t\tevent.preventDefault()\n\t\tsetCurrReps(event.target.value)\n\t}\n\n\tconst addCluster = (event) => {\n\t\tevent.preventDefault()    \n\t\tconst [exercise, weight, sets, reps] = [\n\t\t\tevent.target.elements.exercises.value,\n\t\t\tevent.target.elements.weight.value,\n\t\t\tevent.target.elements.sets.value,\n\t\t\tevent.target.elements.reps.value\n\t\t]\n\t\tif (!exercises.some( exerciseObject => \n\t\t\t\texerciseObject.name.toLowerCase() === exercise.toLowerCase())\n\t\t\t) {\n\t\t\terrorMessageDispatch( {type: \"SET_ERROR\", message: \"Exercise entered not valid. Please choose an exercise from the provided list.\"} )\n\t\t\treturn\n\t\t}\n\n\t\tconst newCluster = \n\t\t\t{\n\t\t\t\t'exercise': exercise, \n\t\t\t\t'weight': weight, \n\t\t\t\t'sets': sets, \n\t\t\t\t'reps': reps\n\t\t\t}\n\t\t\n\t\tif (workout.clusters.length !== 0) {\n\t\t\tsetWorkout({clusters: [...workout.clusters, newCluster]})\n\t\t} else {\n\t\t\tsetWorkout({clusters: [newCluster]})\n\t\t}\n\t\t\n\t\t/*\n\t\t// Creates new workout with this cluster if first cluster of the workout\n\t\tif (Object.keys(workout).length === 0) {\n\t\t\tworkoutServices\n\t\t\t\t.create([newCluster])\n\t\t\t\t.then(createdWorkout => {\t\t\t\n\t\t\t\t\tsetWorkout({...createdWorkout})\n\t\t\t\t\tconsole.log(workout.clusters)\n\t\t\t\t})\t    \n\t\t} else {\n\t\t\t// Adds cluster to previously existing workout\t\n\t\t\tconst updatedWorkout = {...workout, clusters: workout.clusters.concat(newCluster)}\n\t\t\tworkoutServices\n\t\t\t\t.update(workout.id, updatedWorkout)\n\t\t\t\t.then(updatedWorkout => {\t\t\t\n\t\t\t\t\tsetWorkout(updatedWorkout)\n\t\t\t\t})\n\t\t}*/\n\t}\n\n\n\tconst ClusterList = () => {  \n\t\tif (Object.keys(workout).length === 0) {\n\t\t\treturn <label htmlFor=\"noClustersPrompt\"> Add your first exercise for this workout! </label>\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<table>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Exercise</th>\n\t\t\t\t\t\t<th>Weight</th>\n\t\t\t\t\t\t<th>Sets</th>\n\t\t\t\t\t\t<th>Reps</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t{workout.clusters.map((cluster, index) =>\n\t\t\t\t\t\t\t<tr key={index}>\n\t\t\t\t\t\t\t\t<td>{cluster.exercise}</td>\n\t\t\t\t\t\t\t\t<td>{cluster.weight}</td>\n\t\t\t\t\t\t\t\t<td>{cluster.sets}</td>\n\t\t\t\t\t\t\t\t<td>{cluster.reps}</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t)\n\t\t}\n\t}\n  \n\t  const handleExerciseInputChange = (event) => {\n\t\tevent.preventDefault()\n\t\tconst userInputValue = event.target.value.toLowerCase()\n\t\tconst filteredExercisesTemp = exercises.filter( exercise =>\n\t\t\texercise.name.toLowerCase().startsWith(userInputValue)\n\t\t)\n\t\tsetFilteredExercises(filteredExercisesTemp)\n\t  }\n\n\t  const saveWorkout = async (event) => {\n\t\tevent.preventDefault()\n\t\tconsole.log('save workout')\n\t\ttry {\n\t\t\tawait workoutServices.create(workout.clusters)\n\t\t\tsetWorkout({clusters: []})\n\t\t} catch (error) {\n\t\t\tconsole.log('error saving workout')\n\t\t}\n\t  }\n\n\t  // Implements chat interface through which user can specify workout parameters and get a workout generated via ChatGPT\n\t  const ChatInterface = () => {\n\t\tconst [chatMessages, setChatMessages] = useState(['Hi there! I\\'m ChatGPTrainer. Specify the type of workout you want me to generate (target muscles, intensity, your physical condition, etc.) '])\n\t\tconst [currentChatMessage, setCurrentChatMessage] = useState('')\n\t\tconst [generatedClusters, setGeneratedClusters] = useState([])\n\n\t\tconst messagesEndRef = useRef(null)\n\t\tconst scrollToBottom = () => {\n\t\t\tmessagesEndRef.current?.scrollIntoView({ behavior: \"smooth\"})\n\t\t}\n\t\tuseEffect(scrollToBottom, [chatMessages])\n\n\t\tconst handleChatInputChange = (event) => {\n\t\t\tevent.preventDefault()\n\t\t\tsetCurrentChatMessage(event.target.value)\n\t\t}\n\t\t\n\t\t// Handles different user message input provided via the chat interface\n\t\tconst sendChatMessage = async (event) => {\n\t\t\tevent.preventDefault()\n\n\t\t\t// Workout has already been generated, in this case user may either add or clear current generated workout\n\t\t\tif (generatedClusters.length !== 0) {\n\t\t\t\tconst userCommand = currentChatMessage.toLowerCase()\n\t\t\t\tif (userCommand === 'add') {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tworkoutServices\n\t\t\t\t\t\t\t.create(generatedClusters)\n\t\t\t\t\t\t\t.then(createdWorkout => {\t\t\t\n\t\t\t\t\t\t\t\tsetWorkout({...createdWorkout})\n\t\t\t\t\t\t\t\tconsole.log(workout.clusters)\n\t\t\t\t\t\t\t})\t\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tconsole.log('error adding generated workout')\n\t\t\t\t\t}\n\t\t\t\t\tconsole.log('generated workout successfully added')\n\t\t\t\t\tsetGeneratedClusters([])\n\t\t\t\t}\n\t\t\t\t// Clears most recently generated workout\n\t\t\t\telse if (userCommand === 'clear') {\n\t\t\t\t\tsetGeneratedClusters([])\n\t\t\t\t\tsetChatMessages((prevChatMessages) => [...prevChatMessages, 'Specify the type of workout you want me to generate (target muscles, intensity, your physical condition, etc.)'])\n\t\t\t\t}\n\t\t\t\t// Handles invalid entries\n\t\t\t\telse {\n\t\t\t\t\tsetChatMessages((prevChatMessages) => [...prevChatMessages, 'Invalid entry.'])\n\t\t\t\t\tsetChatMessages((prevChatMessages) => [...prevChatMessages, 'Type \\'add\\' to add this workout to your current workout, or \\`clear\\` to generate a new one'])\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\t\t\t// Handles case of when workout has not been generated yet and chatGPTrainer is waiting for user specifications about their desired workout\n\t\t\tsetChatMessages((prevChatMessages) => [...prevChatMessages, currentChatMessage])\n\t\t\tsetChatMessages((prevChatMessages) => [...prevChatMessages, \"Please wait while I generate your personalized workout...\"])\n\t\t\tsetCurrentChatMessage('')\n\t\t\tconst generatedWorkout = await workoutChatbotServices.generateWorkout(currentChatMessage)\n\t\t\tconst modifiedGeneratedWorkout = generatedWorkout.map(cluster => {\n\t\t\t\tconst currExercise = cluster.exerciseName\n\t\t\t\tconst weight = cluster['weight in lbs']\n\t\t\t\tconst sets = cluster.sets\n\t\t\t\tconst reps = cluster.reps\n\t\t\t\treturn {exercise: currExercise, weight: weight, sets: sets, reps: reps}\n\t\t\t})\n\t\t\tsetGeneratedClusters(modifiedGeneratedWorkout)\n\t\t\tconst exerciseMessages = modifiedGeneratedWorkout.map(cluster => {\n\t\t\t\treturn `Exercise: ${cluster.exercise} weight: ${cluster.weight}lbs sets: ${cluster.sets} reps: ${cluster.reps}`\n\t\t\t})\n\t\t\tsetChatMessages((prevChatMessages) => [...prevChatMessages, ...exerciseMessages])\n\t\t\tsetChatMessages((prevChatMessages) => [...prevChatMessages, 'Is this workout to your liking? If so let me know so I can add it to your current workout'])\n\t\t\tsetChatMessages((prevChatMessages) => [...prevChatMessages, 'Type \\'add\\' to add this workout to your current workout, or \\`clear\\` to generate a new one'])\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"chat-interface\">\n\t\t\t\t<h3>ChatGPTrainer</h3>\n\t\t\t\t<div className=\"chat-messages\" style={{ overflow: 'auto', height: '350px' }}>\n\t\t\t\t\t{chatMessages.map((message, index) => (\n\t\t\t\t\t\t<p key={index}>{message}</p>\n\t\t\t\t\t))}\n\t\t\t\t\t<div ref={messagesEndRef} />\n\t\t\t\t</div>\n\t\t\t\t<form id=\"message-form\" onSubmit={sendChatMessage} style={{display: 'flex'}}>\n\t\t\t\t\t<input type=\"text\" value={currentChatMessage} onChange={handleChatInputChange} placeholder=\"Type your message...\" />\n\t\t\t\t\t<button type=\"submit\">Send</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t)\n\t  }\n  \n\treturn (\n\t\t<div className=\"user-main\">\n\t\t\t<Header />\n\t\t\t<div className=\"log-chat\">\t\t\t\n\t\t\t\t<div className=\"user-log\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h2>Current Workout</h2>\t\n\t\t\t\t\t</div>\n\t\t\t\t\t<Notification />\n\t\t\t\t\t<form onSubmit={addCluster}>\t\t\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<label htmlFor=\"exercise\">Exercise</label>\n\t\t\t\t\t\t\t<input list=\"exercise-list\" id=\"exercises\" \n\t\t\t\t\t\t\t\tplaceholder=\"Type to search...\" onChange={handleExerciseInputChange}/>\n\t\t\t\t\t\t\t<datalist id=\"exercise-list\">\n\t\t\t\t\t\t\t\t{filteredExercises.map( exercise => (\n\t\t\t\t\t\t\t\t\t<option key={exercise.id} value={exercise.name} />\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</datalist>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"sets-reps\">\n\t\t\t\t\t\t\t<div className=\"weight\">\n\t\t\t\t\t\t\t\t<label htmlFor=\"weight\">Weight(lbs)</label>\n\t\t\t\t\t\t\t\t<select id=\"weight\" value={currWeight} onChange={handleWeightChange}>\n\t\t\t\t\t\t\t\t\t{[...Array(100).keys()].map((num) => (\n\t\t\t\t\t\t\t\t\t\t<option key={num+1} value={2.5*(num+1)}>\n\t\t\t\t\t\t\t\t\t\t\t{2.5*(num + 1)}\n\t\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"sets\">\n\t\t\t\t\t\t\t\t<label htmlFor=\"sets\">Sets</label>\n\t\t\t\t\t\t\t\t<select id=\"sets\" value={currSets} onChange={handleSetChange}>\n\t\t\t\t\t\t\t\t\t{[...Array(20).keys()].map((num) => (\n\t\t\t\t\t\t\t\t\t\t<option key={num+1} value={num+1}>\n\t\t\t\t\t\t\t\t\t\t\t{num + 1}\n\t\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"reps\">\n\t\t\t\t\t\t\t\t<label htmlFor=\"reps\">Reps</label>\n\t\t\t\t\t\t\t\t<select id=\"reps\" value={currReps} onChange={handleRepChange}>\n\t\t\t\t\t\t\t\t\t{[...Array(50).keys()].map((num) => (\n\t\t\t\t\t\t\t\t\t\t<option key={num+1} value={num+1}>\n\t\t\t\t\t\t\t\t\t\t\t{num + 1}\n\t\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<button type=\"submit\"> Add </button>\n\t\t\t\t\t</form>\n\t\t\t\t\t<ClusterList />\n\t\t\t\t\t<button onClick={saveWorkout} type=\"submit\">Save Workout</button>\n\t\t\t\t</div>\t\n\t\t\t\t<ChatInterface />\n\t\t\t</div>       \n\t\t</div>\n\t)\t\n}\n\nexport default WorkoutLogPage"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}