{"ast":null,"code":"var _jsxFileName = \"/Users/jasonramirez/Desktop/fitness-app/frontend/src/components/UserProgressChart.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from 'react';\nimport { useUserValue } from '../UserContext';\nimport { Chart, registerables } from 'chart.js';\nimport 'chartjs-plugin-annotation';\nimport workoutServices from '../services/workouts';\nimport './UserProgressChart.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserProgressChart = _ref => {\n  _s();\n  let {\n    targetMuscles\n  } = _ref;\n  const [userExercises, setUserExercises] = useState([]);\n  const [filteredUserExercises, setFilteredUserExercises] = useState([]);\n  const [userExerciseClusters, setUserExerciseClusters] = useState([]);\n  const chartCanvasRef = useRef(null);\n  const chartInstanceRef = useRef(null);\n  useEffect(() => {\n    const fetchUserWorkouts = async () => {\n      const userExercisesTemp = await workoutServices.getUserWorkoutExercises();\n      setUserExercises(userExercisesTemp);\n      setFilteredUserExercises(userExercisesTemp);\n    };\n    fetchUserWorkouts();\n    const initializeUserExerciseClusters = async () => {\n      const userExerciseClustersTemp = await workoutServices.getUserClusters(userExercises[0]);\n      setUserExerciseClusters(userExerciseClustersTemp);\n    };\n  }, []);\n  useEffect(() => {\n    const renderExerciseChart = () => {\n      if (chartInstanceRef.current) {\n        // Destroy the existing chart instance if it exists\n        chartInstanceRef.current.destroy();\n      }\n      Chart.register(...registerables);\n      const ctx = chartCanvasRef.current.getContext('2d');\n      const chart = new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: userExerciseClusters.map(cluster => new Date(cluster.createdAt).toLocaleDateString()),\n          datasets: [{\n            label: 'Reps',\n            data: userExerciseClusters.map(cluster => cluster.cluster.reps),\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n            borderColor: 'rgba(75, 192, 192, 1)',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              type: 'linear',\n              beginAtZero: true\n            }\n          }\n        }\n      });\n      chartInstanceRef.current = chart;\n    };\n    renderExerciseChart();\n  }, [userExerciseClusters]);\n  const includesIgnoreCase = (array, searchItem) => {\n    return array.some(item => item.toLowerCase() === searchItem.toLowerCase());\n  };\n  const handleExerciseInputChange = async event => {\n    console.log('handle exercise input change');\n    const userExerciseInputValue = event.target.value.toLowerCase();\n    const filteredUserExercisesTemp = userExercises.filter(exercise => exercise.toLowerCase().startsWith(userExerciseInputValue));\n    setFilteredUserExercises(filteredUserExercisesTemp);\n    console.log(`user input ${userExerciseInputValue}`);\n    if (includesIgnoreCase(userExercises, userExerciseInputValue)) {\n      const userExerciseClustersTemp = await workoutServices.getUserClusters(userExerciseInputValue);\n      console.log(`user clusters for exercise ${userExerciseClustersTemp}`);\n      setUserExerciseClusters(userExerciseClustersTemp);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"user-progress\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"\",\n      children: \"Exercise: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      list: \"exercises-list\",\n      id: \"exercises\",\n      placeholder: \"Choose an exercise...\",\n      onChange: handleExerciseInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n      id: \"exercises-list\",\n      children: filteredUserExercises.map((exercise, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        children: [\" \", exercise, \" \"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-progress-chart\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"exerciseProgressChart\",\n        ref: chartCanvasRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n_s(UserProgressChart, \"/fP55SJQLACR9z5vKD//1KbWxhw=\");\n_c = UserProgressChart;\nexport default UserProgressChart;\nvar _c;\n$RefreshReg$(_c, \"UserProgressChart\");","map":{"version":3,"names":["useState","useEffect","useRef","useUserValue","Chart","registerables","workoutServices","jsxDEV","_jsxDEV","UserProgressChart","_ref","_s","targetMuscles","userExercises","setUserExercises","filteredUserExercises","setFilteredUserExercises","userExerciseClusters","setUserExerciseClusters","chartCanvasRef","chartInstanceRef","fetchUserWorkouts","userExercisesTemp","getUserWorkoutExercises","initializeUserExerciseClusters","userExerciseClustersTemp","getUserClusters","renderExerciseChart","current","destroy","register","ctx","getContext","chart","type","data","labels","map","cluster","Date","createdAt","toLocaleDateString","datasets","label","reps","backgroundColor","borderColor","borderWidth","options","responsive","maintainAspectRatio","scales","y","beginAtZero","includesIgnoreCase","array","searchItem","some","item","toLowerCase","handleExerciseInputChange","event","console","log","userExerciseInputValue","target","value","filteredUserExercisesTemp","filter","exercise","startsWith","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","list","id","placeholder","onChange","index","ref","_c","$RefreshReg$"],"sources":["/Users/jasonramirez/Desktop/fitness-app/frontend/src/components/UserProgressChart.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react'\nimport { useUserValue } from '../UserContext'\nimport { Chart, registerables } from 'chart.js'\nimport 'chartjs-plugin-annotation';\nimport workoutServices from '../services/workouts'\nimport './UserProgressChart.css'\n\nconst UserProgressChart = ( {targetMuscles} ) => {\n    const [userExercises, setUserExercises] = useState([])\n    const [filteredUserExercises, setFilteredUserExercises] = useState([])\n    const [userExerciseClusters, setUserExerciseClusters] = useState([])\n    const chartCanvasRef = useRef(null)\n    const chartInstanceRef = useRef(null);\n\n    useEffect(() => {\n        const fetchUserWorkouts = async () => {\n            const userExercisesTemp = await workoutServices.getUserWorkoutExercises()\n            setUserExercises(userExercisesTemp)\n            setFilteredUserExercises(userExercisesTemp)\n        }\n        fetchUserWorkouts()\n\n        const initializeUserExerciseClusters = async () => {\n            const userExerciseClustersTemp =  await workoutServices.getUserClusters(userExercises[0])\n            setUserExerciseClusters(userExerciseClustersTemp)\n        }\n    }, [])\n\n    useEffect(() => {\n        const renderExerciseChart = () => {\n            if (chartInstanceRef.current) {\n                // Destroy the existing chart instance if it exists\n                chartInstanceRef.current.destroy();\n              }\n            Chart.register(...registerables);\n            const ctx = chartCanvasRef.current.getContext('2d')\n            const chart = new Chart(ctx, {\n                type: 'line',\n                data: {\n                    labels: userExerciseClusters.map( cluster => new Date(cluster.createdAt).toLocaleDateString() ),\n                    datasets: [\n                        {\n                            label: 'Reps',\n                            data: userExerciseClusters.map(cluster => cluster.cluster.reps),\n                            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                            borderColor: 'rgba(75, 192, 192, 1)',\n                            borderWidth: 1,\n                        }\n                    ]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            type: 'linear',\n                            beginAtZero: true,\n                        },\n                    }\n                }\n            })\n            chartInstanceRef.current = chart;\n        }\n\n        renderExerciseChart()\n    }, [userExerciseClusters])\n\n    const includesIgnoreCase = (array, searchItem) => {\n        return array.some((item) => item.toLowerCase() === searchItem.toLowerCase())\n    }\n\n    const handleExerciseInputChange = async (event) => {\n        console.log('handle exercise input change')\n        const userExerciseInputValue = event.target.value.toLowerCase()\n        const filteredUserExercisesTemp = userExercises.filter( exercise => \n            exercise.toLowerCase().startsWith(userExerciseInputValue)\n        )\n        setFilteredUserExercises(filteredUserExercisesTemp)\n        console.log(`user input ${userExerciseInputValue}`)\n        if (includesIgnoreCase(userExercises, userExerciseInputValue)) {\n            const userExerciseClustersTemp = await workoutServices.getUserClusters(userExerciseInputValue)\n            console.log(`user clusters for exercise ${userExerciseClustersTemp}`)\n            setUserExerciseClusters(userExerciseClustersTemp)\n        }\n    }\n    \n    return (\n        <div className=\"user-progress\" >\n            <label htmlFor=\"\">Exercise: </label>\n            <input list=\"exercises-list\"\n                    id=\"exercises\" \n                    placeholder='Choose an exercise...' \n                    onChange={handleExerciseInputChange}\n            />\n            <datalist id=\"exercises-list\">\n                {filteredUserExercises.map( (exercise, index) => (\n                    <option key={index}> {exercise} </option>\n                ))}\n            </datalist>\n            <div className=\"user-progress-chart\">\n                <canvas id=\"exerciseProgressChart\" ref={chartCanvasRef}></canvas>\n            </div>\n        </div>\n    )\n}\n\nexport default UserProgressChart"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}