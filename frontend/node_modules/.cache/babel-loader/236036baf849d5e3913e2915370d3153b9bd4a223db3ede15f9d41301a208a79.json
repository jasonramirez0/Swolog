{"ast":null,"code":"import _objectSpread from\"/Users/jasonramirez/Desktop/fitness-app/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _regeneratorRuntime from\"/Users/jasonramirez/Desktop/fitness-app/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/jasonramirez/Desktop/fitness-app/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _toConsumableArray from\"/Users/jasonramirez/Desktop/fitness-app/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/Users/jasonramirez/Desktop/fitness-app/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState,useEffect}from'react';import Header from'../components/Header';import Notification from'../components/Notification';import{useErrorMessageDispatch}from'../ErrorMessageContext';import exerciseServices from'../services/exercises';import workoutServices from'../services/workouts';import workoutChatbotServices from'../services/workoutChatbot';import{useRef}from'react';import{Trash}from'react-bootstrap-icons';import'./WorkoutLogPage.css';// Defines page where a user can log their workout\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var WorkoutLogPage=function WorkoutLogPage(){/* UserPage state variables and updater functions */var _useState=useState([]),_useState2=_slicedToArray(_useState,2),exercises=_useState2[0],setExercises=_useState2[1];var _useState3=useState({clusters:[]}),_useState4=_slicedToArray(_useState3,2),workout=_useState4[0],setWorkout=_useState4[1];var _useState5=useState(0),_useState6=_slicedToArray(_useState5,2),currWeight=_useState6[0],setCurrWeight=_useState6[1];var _useState7=useState(0),_useState8=_slicedToArray(_useState7,2),currSets=_useState8[0],setCurrSets=_useState8[1];var _useState9=useState(0),_useState10=_slicedToArray(_useState9,2),currReps=_useState10[0],setCurrReps=_useState10[1];var _useState11=useState([]),_useState12=_slicedToArray(_useState11,2),filteredExercises=_useState12[0],setFilteredExercises=_useState12[1];var errorMessageDispatch=useErrorMessageDispatch();/* Gets and sets all of the exercises from the backend */useEffect(function(){exerciseServices.getAll().then(function(exercises){setExercises(exercises);});},[]);var handleWeightChange=function handleWeightChange(event){event.preventDefault();setCurrWeight(event.target.value);};var handleSetChange=function handleSetChange(event){event.preventDefault();setCurrSets(event.target.value);};var handleRepChange=function handleRepChange(event){event.preventDefault();setCurrReps(event.target.value);};var addCluster=function addCluster(event){event.preventDefault();var _ref=[event.target.elements.exercises.value,event.target.elements.weight.value,event.target.elements.sets.value,event.target.elements.reps.value],exercise=_ref[0],weight=_ref[1],sets=_ref[2],reps=_ref[3];if(!exercises.some(function(exerciseObject){return exerciseObject.name.toLowerCase()===exercise.toLowerCase();})){errorMessageDispatch({type:\"SET_ERROR\",message:\"Exercise entered not valid. Please choose an exercise from the provided list.\"});return;}var newCluster={'exercise':exercise,'weight':weight,'sets':sets,'reps':reps};if(workout.clusters.length!==0){setWorkout({clusters:[].concat(_toConsumableArray(workout.clusters),[newCluster])});}else{setWorkout({clusters:[newCluster]});}};var removeCluster=function removeCluster(index){setWorkout({clusters:[].concat(_toConsumableArray(workout.clusters.slice(0,index)),_toConsumableArray(workout.clusters.slice(index+1)))});};var ClusterList=function ClusterList(){if(Object.keys(workout).length===0){return/*#__PURE__*/_jsx(\"label\",{htmlFor:\"noClustersPrompt\",children:\" Add your first exercise for this workout! \"});}else{return/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Exercise\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Weight\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Sets\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Reps\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:workout.clusters.map(function(cluster,index){return/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:cluster.exercise}),/*#__PURE__*/_jsx(\"td\",{children:cluster.weight}),/*#__PURE__*/_jsx(\"td\",{children:cluster.sets}),/*#__PURE__*/_jsx(\"td\",{children:cluster.reps}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(Trash,{className:\"trash-icon\",onClick:function onClick(){return removeCluster(index);}})})]},index);})})]});}};var handleExerciseInputChange=function handleExerciseInputChange(event){event.preventDefault();var userInputValue=event.target.value.toLowerCase();var filteredExercisesTemp=exercises.filter(function(exercise){return exercise.name.toLowerCase().startsWith(userInputValue);});setFilteredExercises(filteredExercisesTemp);};var saveWorkout=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(event){return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:event.preventDefault();console.log('save workout');_context.prev=2;_context.next=5;return workoutServices.create(workout.clusters);case 5:setWorkout({clusters:[]});_context.next=11;break;case 8:_context.prev=8;_context.t0=_context[\"catch\"](2);console.log('error saving workout');case 11:case\"end\":return _context.stop();}},_callee,null,[[2,8]]);}));return function saveWorkout(_x){return _ref2.apply(this,arguments);};}();// Implements chat interface through which user can specify workout parameters and get a workout generated via ChatGPT\nvar ChatInterface=function ChatInterface(){var _useState13=useState(['Hi there! I\\'m ChatGPTrainer. Specify the type of workout you want me to generate (target muscles, intensity, your physical condition, etc.) ']),_useState14=_slicedToArray(_useState13,2),chatMessages=_useState14[0],setChatMessages=_useState14[1];var _useState15=useState(''),_useState16=_slicedToArray(_useState15,2),currentChatMessage=_useState16[0],setCurrentChatMessage=_useState16[1];var _useState17=useState([]),_useState18=_slicedToArray(_useState17,2),generatedClusters=_useState18[0],setGeneratedClusters=_useState18[1];var messagesEndRef=useRef(null);var scrollToBottom=function scrollToBottom(){var _messagesEndRef$curre;(_messagesEndRef$curre=messagesEndRef.current)===null||_messagesEndRef$curre===void 0?void 0:_messagesEndRef$curre.scrollIntoView({behavior:\"smooth\"});};useEffect(scrollToBottom,[chatMessages]);var handleChatInputChange=function handleChatInputChange(event){event.preventDefault();setCurrentChatMessage(event.target.value);};// Handles different user message input provided via the chat interface\nvar sendChatMessage=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(event){var userCommand,generatedWorkout,modifiedGeneratedWorkout,exerciseMessages;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:event.preventDefault();// Workout has already been generated, in this case user may either add or clear current generated workout\nif(!(generatedClusters.length!==0)){_context2.next=5;break;}userCommand=currentChatMessage.toLowerCase();if(userCommand==='add'){try{workoutServices.create(generatedClusters).then(function(createdWorkout){var generatedClusters=createdWorkout.clusters.map(function(cluster){return _objectSpread({exercise:cluster.exerciseName},cluster);});setWorkout({clusters:generatedClusters});});}catch(error){console.log('error adding generated workout');}console.log('generated workout successfully added');setGeneratedClusters([]);}// Clears most recently generated workout\nelse if(userCommand==='clear'){setGeneratedClusters([]);setChatMessages(function(prevChatMessages){return[].concat(_toConsumableArray(prevChatMessages),['Specify the type of workout you want me to generate (target muscles, intensity, your physical condition, etc.)']);});}// Handles invalid entries\nelse{setChatMessages(function(prevChatMessages){return[].concat(_toConsumableArray(prevChatMessages),['Invalid entry.']);});setChatMessages(function(prevChatMessages){return[].concat(_toConsumableArray(prevChatMessages),['Type \\'add\\' to add this workout to your current workout, or \\`clear\\` to generate a new one']);});}return _context2.abrupt(\"return\");case 5:// Handles case of when workout has not been generated yet and chatGPTrainer is waiting for user specifications about their desired workout\nsetChatMessages(function(prevChatMessages){return[].concat(_toConsumableArray(prevChatMessages),[currentChatMessage]);});setChatMessages(function(prevChatMessages){return[].concat(_toConsumableArray(prevChatMessages),[\"Please wait while I generate your personalized workout...\"]);});setCurrentChatMessage('');_context2.next=10;return workoutChatbotServices.generateWorkout(currentChatMessage);case 10:generatedWorkout=_context2.sent;modifiedGeneratedWorkout=generatedWorkout.map(function(cluster){var currExercise=cluster.exerciseName;var weight=cluster['weight in lbs'];var sets=cluster.sets;var reps=cluster.reps;return{exercise:currExercise,weight:weight,sets:sets,reps:reps};});setGeneratedClusters(modifiedGeneratedWorkout);exerciseMessages=modifiedGeneratedWorkout.map(function(cluster){return\"Exercise: \".concat(cluster.exercise,\" weight: \").concat(cluster.weight,\"lbs sets: \").concat(cluster.sets,\" reps: \").concat(cluster.reps);});setChatMessages(function(prevChatMessages){return[].concat(_toConsumableArray(prevChatMessages),_toConsumableArray(exerciseMessages));});setChatMessages(function(prevChatMessages){return[].concat(_toConsumableArray(prevChatMessages),['Is this workout to your liking? If so let me know so I can add it to your current workout']);});setChatMessages(function(prevChatMessages){return[].concat(_toConsumableArray(prevChatMessages),['Type \\'add\\' to add this workout to your current workout, or \\`clear\\` to generate a new one']);});case 17:case\"end\":return _context2.stop();}},_callee2);}));return function sendChatMessage(_x2){return _ref3.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(\"div\",{className:\"chat-interface\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"ChatGPTrainer\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-messages\",style:{overflow:'auto',height:'350px'},children:[chatMessages.map(function(message,index){return/*#__PURE__*/_jsx(\"p\",{children:message},index);}),/*#__PURE__*/_jsx(\"div\",{ref:messagesEndRef})]}),/*#__PURE__*/_jsxs(\"form\",{id:\"message-form\",onSubmit:sendChatMessage,style:{display:'flex'},children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:currentChatMessage,onChange:handleChatInputChange,placeholder:\"Type your message...\"}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Send\"})]})]});};return/*#__PURE__*/_jsxs(\"div\",{className:\"user-main\",children:[/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsxs(\"div\",{className:\"log-chat\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"user-log\",children:[/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"h2\",{children:\"Current Workout\"})}),/*#__PURE__*/_jsx(Notification,{}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:addCluster,children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"exercise\",children:\"Exercise\"}),/*#__PURE__*/_jsx(\"input\",{list:\"exercise-list\",id:\"exercises\",placeholder:\"Type to search...\",onChange:handleExerciseInputChange}),/*#__PURE__*/_jsx(\"datalist\",{id:\"exercise-list\",children:filteredExercises.map(function(exercise){return/*#__PURE__*/_jsx(\"option\",{value:exercise.name},exercise.id);})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"sets-reps\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"weight\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"weight\",children:\"Weight(lbs)\"}),/*#__PURE__*/_jsx(\"select\",{id:\"weight\",value:currWeight,onChange:handleWeightChange,children:_toConsumableArray(Array(100).keys()).map(function(num){return/*#__PURE__*/_jsx(\"option\",{value:2.5*(num+1),children:2.5*(num+1)},num+1);})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"sets\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"sets\",children:\"Sets\"}),/*#__PURE__*/_jsx(\"select\",{id:\"sets\",value:currSets,onChange:handleSetChange,children:_toConsumableArray(Array(20).keys()).map(function(num){return/*#__PURE__*/_jsx(\"option\",{value:num+1,children:num+1},num+1);})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"reps\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"reps\",children:\"Reps\"}),/*#__PURE__*/_jsx(\"select\",{id:\"reps\",value:currReps,onChange:handleRepChange,children:_toConsumableArray(Array(50).keys()).map(function(num){return/*#__PURE__*/_jsx(\"option\",{value:num+1,children:num+1},num+1);})})]})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\" Add \"})]}),/*#__PURE__*/_jsx(ClusterList,{}),workout.clusters.length!==0&&/*#__PURE__*/_jsx(\"button\",{id:\"save-workout-button\",onClick:saveWorkout,type:\"submit\",children:\"Save Workout\"})]}),/*#__PURE__*/_jsx(ChatInterface,{})]})]});};export default WorkoutLogPage;","map":{"version":3,"names":["useState","useEffect","Header","Notification","useErrorMessageDispatch","exerciseServices","workoutServices","workoutChatbotServices","useRef","Trash","jsx","_jsx","jsxs","_jsxs","WorkoutLogPage","_useState","_useState2","_slicedToArray","exercises","setExercises","_useState3","clusters","_useState4","workout","setWorkout","_useState5","_useState6","currWeight","setCurrWeight","_useState7","_useState8","currSets","setCurrSets","_useState9","_useState10","currReps","setCurrReps","_useState11","_useState12","filteredExercises","setFilteredExercises","errorMessageDispatch","getAll","then","handleWeightChange","event","preventDefault","target","value","handleSetChange","handleRepChange","addCluster","_ref","elements","weight","sets","reps","exercise","some","exerciseObject","name","toLowerCase","type","message","newCluster","length","concat","_toConsumableArray","removeCluster","index","slice","ClusterList","Object","keys","htmlFor","children","map","cluster","className","onClick","handleExerciseInputChange","userInputValue","filteredExercisesTemp","filter","startsWith","saveWorkout","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","console","log","create","t0","stop","_x","apply","arguments","ChatInterface","_useState13","_useState14","chatMessages","setChatMessages","_useState15","_useState16","currentChatMessage","setCurrentChatMessage","_useState17","_useState18","generatedClusters","setGeneratedClusters","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleChatInputChange","sendChatMessage","_ref3","_callee2","userCommand","generatedWorkout","modifiedGeneratedWorkout","exerciseMessages","_callee2$","_context2","createdWorkout","_objectSpread","exerciseName","error","prevChatMessages","abrupt","generateWorkout","sent","currExercise","_x2","style","overflow","height","ref","id","onSubmit","display","onChange","placeholder","list","Array","num"],"sources":["/Users/jasonramirez/Desktop/fitness-app/frontend/src/components/WorkoutLogPage.js"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport Header from '../components/Header'\nimport Notification from '../components/Notification'\nimport { useErrorMessageDispatch } from '../ErrorMessageContext'\nimport exerciseServices from '../services/exercises'\nimport workoutServices from '../services/workouts'\nimport workoutChatbotServices from '../services/workoutChatbot'\nimport { useRef } from 'react'\nimport { Trash } from 'react-bootstrap-icons'\nimport './WorkoutLogPage.css'\n\n// Defines page where a user can log their workout\nconst WorkoutLogPage = () => {\t\n\t/* UserPage state variables and updater functions */\n\tconst [exercises, setExercises] = useState([])\n\tconst [workout, setWorkout] = useState({clusters: []})\n\tconst [currWeight, setCurrWeight] = useState(0)\n\tconst [currSets, setCurrSets] = useState(0)\n\tconst [currReps, setCurrReps] = useState(0)\n\tconst [filteredExercises, setFilteredExercises] = useState([])\n\tconst errorMessageDispatch = useErrorMessageDispatch()\n\t\n\t/* Gets and sets all of the exercises from the backend */\n\tuseEffect(() => {\n\t\texerciseServices\n\t\t\t.getAll()\n\t\t\t.then(exercises => {\n\t\t\t\tsetExercises(exercises)\n\t\t\t})\n\t}, [])\n\n\tconst handleWeightChange = (event) => {\n\t\tevent.preventDefault()\n\t\tsetCurrWeight(event.target.value)\n\t}\n\tconst handleSetChange = (event) => {\t\n\t\tevent.preventDefault()\n\t\tsetCurrSets(event.target.value)\n\t}\n\n\tconst handleRepChange = (event) => {\n\t\tevent.preventDefault()\n\t\tsetCurrReps(event.target.value)\n\t}\n\n\tconst addCluster = (event) => {\n\t\tevent.preventDefault()    \n\t\tconst [exercise, weight, sets, reps] = [\n\t\t\tevent.target.elements.exercises.value,\n\t\t\tevent.target.elements.weight.value,\n\t\t\tevent.target.elements.sets.value,\n\t\t\tevent.target.elements.reps.value\n\t\t]\n\t\tif (!exercises.some( exerciseObject => \n\t\t\t\texerciseObject.name.toLowerCase() === exercise.toLowerCase())\n\t\t\t) {\n\t\t\terrorMessageDispatch( {type: \"SET_ERROR\", message: \"Exercise entered not valid. Please choose an exercise from the provided list.\"} )\n\t\t\treturn\n\t\t}\n\n\t\tconst newCluster = \n\t\t\t{\n\t\t\t\t'exercise': exercise, \n\t\t\t\t'weight': weight, \n\t\t\t\t'sets': sets, \n\t\t\t\t'reps': reps\n\t\t\t}\n\t\t\n\t\tif (workout.clusters.length !== 0) {\n\t\t\tsetWorkout({clusters: [...workout.clusters, newCluster]})\n\t\t} else {\n\t\t\tsetWorkout({clusters: [newCluster]})\n\t\t}\n\t}\n\n\tconst removeCluster = (index) => {\n\t\tsetWorkout({clusters: [...workout.clusters.slice(0, index), ...workout.clusters.slice(index+1)]})\n\t}\n\n\tconst ClusterList = () => {  \n\t\tif (Object.keys(workout).length === 0) {\n\t\t\treturn <label htmlFor=\"noClustersPrompt\"> Add your first exercise for this workout! </label>\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<table>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Exercise</th>\n\t\t\t\t\t\t<th>Weight</th>\n\t\t\t\t\t\t<th>Sets</th>\n\t\t\t\t\t\t<th>Reps</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t{workout.clusters.map((cluster, index) =>\n\t\t\t\t\t\t\t<tr key={index}>\n\t\t\t\t\t\t\t\t<td>{cluster.exercise}</td>\n\t\t\t\t\t\t\t\t<td>{cluster.weight}</td>\n\t\t\t\t\t\t\t\t<td>{cluster.sets}</td>\n\t\t\t\t\t\t\t\t<td>{cluster.reps}</td>\n\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t<Trash className=\"trash-icon\" onClick={() => removeCluster(index)}/>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t)\n\t\t}\n\t}\n  \n\t  const handleExerciseInputChange = (event) => {\n\t\tevent.preventDefault()\n\t\tconst userInputValue = event.target.value.toLowerCase()\n\t\tconst filteredExercisesTemp = exercises.filter( exercise =>\n\t\t\texercise.name.toLowerCase().startsWith(userInputValue)\n\t\t)\n\t\tsetFilteredExercises(filteredExercisesTemp)\n\t  }\n\n\t  const saveWorkout = async (event) => {\n\t\tevent.preventDefault()\n\t\tconsole.log('save workout')\n\t\ttry {\n\t\t\tawait workoutServices.create(workout.clusters)\n\t\t\tsetWorkout({clusters: []})\n\t\t} catch (error) {\n\t\t\tconsole.log('error saving workout')\n\t\t}\n\t  }\n\n\t  // Implements chat interface through which user can specify workout parameters and get a workout generated via ChatGPT\n\t  const ChatInterface = () => {\n\t\tconst [chatMessages, setChatMessages] = useState(['Hi there! I\\'m ChatGPTrainer. Specify the type of workout you want me to generate (target muscles, intensity, your physical condition, etc.) '])\n\t\tconst [currentChatMessage, setCurrentChatMessage] = useState('')\n\t\tconst [generatedClusters, setGeneratedClusters] = useState([])\n\n\t\tconst messagesEndRef = useRef(null)\n\t\tconst scrollToBottom = () => {\n\t\t\tmessagesEndRef.current?.scrollIntoView({ behavior: \"smooth\"})\n\t\t}\n\t\tuseEffect(scrollToBottom, [chatMessages])\n\n\t\tconst handleChatInputChange = (event) => {\n\t\t\tevent.preventDefault()\n\t\t\tsetCurrentChatMessage(event.target.value)\n\t\t}\n\t\t\n\t\t// Handles different user message input provided via the chat interface\n\t\tconst sendChatMessage = async (event) => {\n\t\t\tevent.preventDefault()\n\n\t\t\t// Workout has already been generated, in this case user may either add or clear current generated workout\n\t\t\tif (generatedClusters.length !== 0) {\n\t\t\t\tconst userCommand = currentChatMessage.toLowerCase()\n\t\t\t\tif (userCommand === 'add') {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tworkoutServices\n\t\t\t\t\t\t\t.create(generatedClusters)\n\t\t\t\t\t\t\t.then(createdWorkout => {\t\n\t\t\t\t\t\t\t\tconst generatedClusters = createdWorkout.clusters.map(cluster => (\n\t\t\t\t\t\t\t\t\t{exercise: cluster.exerciseName, ...cluster}\n\t\t\t\t\t\t\t\t))\t\t\n\t\t\t\t\t\t\t\tsetWorkout({ clusters: generatedClusters })\n\t\t\t\t\t\t\t})\t\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tconsole.log('error adding generated workout')\n\t\t\t\t\t}\n\t\t\t\t\tconsole.log('generated workout successfully added')\n\t\t\t\t\tsetGeneratedClusters([])\n\t\t\t\t}\n\t\t\t\t// Clears most recently generated workout\n\t\t\t\telse if (userCommand === 'clear') {\n\t\t\t\t\tsetGeneratedClusters([])\n\t\t\t\t\tsetChatMessages((prevChatMessages) => [...prevChatMessages, 'Specify the type of workout you want me to generate (target muscles, intensity, your physical condition, etc.)'])\n\t\t\t\t}\n\t\t\t\t// Handles invalid entries\n\t\t\t\telse {\n\t\t\t\t\tsetChatMessages((prevChatMessages) => [...prevChatMessages, 'Invalid entry.'])\n\t\t\t\t\tsetChatMessages((prevChatMessages) => [...prevChatMessages, 'Type \\'add\\' to add this workout to your current workout, or \\`clear\\` to generate a new one'])\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\t\t\t// Handles case of when workout has not been generated yet and chatGPTrainer is waiting for user specifications about their desired workout\n\t\t\tsetChatMessages((prevChatMessages) => [...prevChatMessages, currentChatMessage])\n\t\t\tsetChatMessages((prevChatMessages) => [...prevChatMessages, \"Please wait while I generate your personalized workout...\"])\n\t\t\tsetCurrentChatMessage('')\n\t\t\tconst generatedWorkout = await workoutChatbotServices.generateWorkout(currentChatMessage)\n\t\t\tconst modifiedGeneratedWorkout = generatedWorkout.map(cluster => {\n\t\t\t\tconst currExercise = cluster.exerciseName\n\t\t\t\tconst weight = cluster['weight in lbs']\n\t\t\t\tconst sets = cluster.sets\n\t\t\t\tconst reps = cluster.reps\n\t\t\t\treturn {exercise: currExercise, weight: weight, sets: sets, reps: reps}\n\t\t\t})\n\t\t\tsetGeneratedClusters(modifiedGeneratedWorkout)\n\t\t\tconst exerciseMessages = modifiedGeneratedWorkout.map(cluster => {\n\t\t\t\treturn `Exercise: ${cluster.exercise} weight: ${cluster.weight}lbs sets: ${cluster.sets} reps: ${cluster.reps}`\n\t\t\t})\n\t\t\tsetChatMessages((prevChatMessages) => [...prevChatMessages, ...exerciseMessages])\n\t\t\tsetChatMessages((prevChatMessages) => [...prevChatMessages, 'Is this workout to your liking? If so let me know so I can add it to your current workout'])\n\t\t\tsetChatMessages((prevChatMessages) => [...prevChatMessages, 'Type \\'add\\' to add this workout to your current workout, or \\`clear\\` to generate a new one'])\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"chat-interface\">\n\t\t\t\t<h3>ChatGPTrainer</h3>\n\t\t\t\t<div className=\"chat-messages\" style={{ overflow: 'auto', height: '350px' }}>\n\t\t\t\t\t{chatMessages.map((message, index) => (\n\t\t\t\t\t\t<p key={index}>{message}</p>\n\t\t\t\t\t))}\n\t\t\t\t\t<div ref={messagesEndRef} />\n\t\t\t\t</div>\n\t\t\t\t<form id=\"message-form\" onSubmit={sendChatMessage} style={{display: 'flex'}}>\n\t\t\t\t\t<input type=\"text\" value={currentChatMessage} onChange={handleChatInputChange} placeholder=\"Type your message...\" />\n\t\t\t\t\t<button type=\"submit\">Send</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t)\n\t  }\n  \n\treturn (\n\t\t<div className=\"user-main\">\n\t\t\t<Header />\n\t\t\t<div className=\"log-chat\">\t\t\t\n\t\t\t\t<div className=\"user-log\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h2>Current Workout</h2>\t\n\t\t\t\t\t</div>\n\t\t\t\t\t<Notification />\n\t\t\t\t\t<form onSubmit={addCluster}>\t\t\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<label htmlFor=\"exercise\">Exercise</label>\n\t\t\t\t\t\t\t<input list=\"exercise-list\" id=\"exercises\" \n\t\t\t\t\t\t\t\tplaceholder=\"Type to search...\" onChange={handleExerciseInputChange}/>\n\t\t\t\t\t\t\t<datalist id=\"exercise-list\">\n\t\t\t\t\t\t\t\t{filteredExercises.map( exercise => (\n\t\t\t\t\t\t\t\t\t<option key={exercise.id} value={exercise.name} />\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</datalist>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"sets-reps\">\n\t\t\t\t\t\t\t<div className=\"weight\">\n\t\t\t\t\t\t\t\t<label htmlFor=\"weight\">Weight(lbs)</label>\n\t\t\t\t\t\t\t\t<select id=\"weight\" value={currWeight} onChange={handleWeightChange}>\n\t\t\t\t\t\t\t\t\t{[...Array(100).keys()].map((num) => (\n\t\t\t\t\t\t\t\t\t\t<option key={num+1} value={2.5*(num+1)}>\n\t\t\t\t\t\t\t\t\t\t\t{2.5*(num + 1)}\n\t\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"sets\">\n\t\t\t\t\t\t\t\t<label htmlFor=\"sets\">Sets</label>\n\t\t\t\t\t\t\t\t<select id=\"sets\" value={currSets} onChange={handleSetChange}>\n\t\t\t\t\t\t\t\t\t{[...Array(20).keys()].map((num) => (\n\t\t\t\t\t\t\t\t\t\t<option key={num+1} value={num+1}>\n\t\t\t\t\t\t\t\t\t\t\t{num + 1}\n\t\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"reps\">\n\t\t\t\t\t\t\t\t<label htmlFor=\"reps\">Reps</label>\n\t\t\t\t\t\t\t\t<select id=\"reps\" value={currReps} onChange={handleRepChange}>\n\t\t\t\t\t\t\t\t\t{[...Array(50).keys()].map((num) => (\n\t\t\t\t\t\t\t\t\t\t<option key={num+1} value={num+1}>\n\t\t\t\t\t\t\t\t\t\t\t{num + 1}\n\t\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<button type=\"submit\"> Add </button>\n\t\t\t\t\t</form>\n\t\t\t\t\t<ClusterList />\n\t\t\t\t\t{workout.clusters.length !== 0 &&\n\t\t\t\t\t\t<button id=\"save-workout-button\" onClick={saveWorkout} type=\"submit\">Save Workout</button>\n\t\t\t\t\t}\n\t\t\t\t</div>\t\n\t\t\t\t<ChatInterface />\n\t\t\t</div>       \n\t\t</div>\n\t)\t\n}\n\nexport default WorkoutLogPage"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}