{"ast":null,"code":"var _jsxFileName = \"/Users/jasonramirez/Desktop/fitness-app/frontend/src/components/UserProgressChart.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useUserValue } from '../UserContext';\nimport Chart from 'chart.js';\nimport workoutServices from '../services/workouts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserProgressChart = _ref => {\n  _s();\n  let {\n    targetMuscles\n  } = _ref;\n  const [userExercises, setUserExercises] = useState([]);\n  const [targetMuscleClusters, setTargetMuscleClusters] = useState([]);\n  useEffect(() => {\n    const fetchUserWorkouts = async () => {\n      const userExercisesTemp = await workoutServices.getUserWorkoutExercises();\n      setUserExercises(userExercisesTemp);\n    };\n    fetchUserWorkouts();\n  }, []);\n  const handleExerciseInputChange = async event => {\n    const userInputValue = event.target.input.toLowerCase();\n    const userTargetMuscleClusters = await workoutServices.getUserWorkoutExercises();\n    setTargetMuscleClusters(userTargetMuscleClusters);\n  };\n  //TODO: get users clusters that contain an exercise for selected muscle group (1 cluster per workout for simplicity)\n  //also get the workout.createdAt parameter along with the cluster object (technically you just need the reps for this chart)\n  //Then create chart using workout.createdAt (x-axis) and, for now, cluster.reps (y-axis)\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"\",\n      children: \"Exercise: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      list: \"exercises-list\",\n      id: \"exercises\",\n      placeholder: \"Choose an exercise...\",\n      onChange: handleExerciseChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n      id: \"exercises-list\",\n      children: userExercises.map(exercise => /*#__PURE__*/_jsxDEV(\"option\", {\n        children: [\" \", exercise, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n_s(UserProgressChart, \"z9ClfiAdlldzgpK0AjbYtxwj0BE=\");\n_c = UserProgressChart;\nexport default UserProgressChart;\nvar _c;\n$RefreshReg$(_c, \"UserProgressChart\");","map":{"version":3,"names":["useState","useEffect","useUserValue","Chart","workoutServices","jsxDEV","_jsxDEV","UserProgressChart","_ref","_s","targetMuscles","userExercises","setUserExercises","targetMuscleClusters","setTargetMuscleClusters","fetchUserWorkouts","userExercisesTemp","getUserWorkoutExercises","handleExerciseInputChange","event","userInputValue","target","input","toLowerCase","userTargetMuscleClusters","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","list","id","placeholder","onChange","handleExerciseChange","map","exercise","_c","$RefreshReg$"],"sources":["/Users/jasonramirez/Desktop/fitness-app/frontend/src/components/UserProgressChart.js"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport { useUserValue } from '../UserContext'\nimport Chart from 'chart.js'\nimport workoutServices from '../services/workouts'\n\nconst UserProgressChart = ( {targetMuscles} ) => {\n    const [userExercises, setUserExercises] = useState([])\n    const [targetMuscleClusters, setTargetMuscleClusters] = useState([])\n\n    useEffect(() => {\n        const fetchUserWorkouts = async () => {\n            const userExercisesTemp = await workoutServices.getUserWorkoutExercises()\n            setUserExercises(userExercisesTemp)\n        }\n        fetchUserWorkouts()\n    }, [])\n\n    const handleExerciseInputChange = async (event) => {\n        const userInputValue = event.target.input.toLowerCase()\n        const userTargetMuscleClusters = await workoutServices.getUserWorkoutExercises()\n        setTargetMuscleClusters(userTargetMuscleClusters)\n    }\n    //TODO: get users clusters that contain an exercise for selected muscle group (1 cluster per workout for simplicity)\n    //also get the workout.createdAt parameter along with the cluster object (technically you just need the reps for this chart)\n    //Then create chart using workout.createdAt (x-axis) and, for now, cluster.reps (y-axis)\n    return (\n        <div>\n            <label htmlFor=\"\">Exercise: </label>\n            <input list=\"exercises-list\" id=\"exercises\" \n            placeholder='Choose an exercise...' onChange={handleExerciseChange}/>\n            <datalist id=\"exercises-list\">\n                {userExercises.map( exercise => (\n                    <option> {exercise} </option>\n                ))}\n            </datalist>\n        </div>\n    )\n}\n\nexport default UserProgressChart"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,OAAOC,KAAK,MAAM,UAAU;AAC5B,OAAOC,eAAe,MAAM,sBAAsB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,iBAAiB,GAAGC,IAAA,IAAuB;EAAAC,EAAA;EAAA,IAArB;IAACC;EAAa,CAAC,GAAAF,IAAA;EACvC,MAAM,CAACG,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACa,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAEpEC,SAAS,CAAC,MAAM;IACZ,MAAMc,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MAClC,MAAMC,iBAAiB,GAAG,MAAMZ,eAAe,CAACa,uBAAuB,EAAE;MACzEL,gBAAgB,CAACI,iBAAiB,CAAC;IACvC,CAAC;IACDD,iBAAiB,EAAE;EACvB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,yBAAyB,GAAG,MAAOC,KAAK,IAAK;IAC/C,MAAMC,cAAc,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAACC,WAAW,EAAE;IACvD,MAAMC,wBAAwB,GAAG,MAAMpB,eAAe,CAACa,uBAAuB,EAAE;IAChFH,uBAAuB,CAACU,wBAAwB,CAAC;EACrD,CAAC;EACD;EACA;EACA;EACA,oBACIlB,OAAA;IAAAmB,QAAA,gBACInB,OAAA;MAAOoB,OAAO,EAAC,EAAE;MAAAD,QAAA,EAAC;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAQ,eACpCxB,OAAA;MAAOyB,IAAI,EAAC,gBAAgB;MAACC,EAAE,EAAC,WAAW;MAC3CC,WAAW,EAAC,uBAAuB;MAACC,QAAQ,EAAEC;IAAqB;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAE,eACrExB,OAAA;MAAU0B,EAAE,EAAC,gBAAgB;MAAAP,QAAA,EACxBd,aAAa,CAACyB,GAAG,CAAEC,QAAQ,iBACxB/B,OAAA;QAAAmB,QAAA,GAAQ,GAAC,EAACY,QAAQ,EAAC,GAAC;MAAA;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACvB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACK;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACT;AAEd,CAAC;AAAArB,EAAA,CAhCKF,iBAAiB;AAAA+B,EAAA,GAAjB/B,iBAAiB;AAkCvB,eAAeA,iBAAiB;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}