{"ast":null,"code":"var _jsxFileName = \"/Users/jasonramirez/Desktop/fitness-app/frontend/src/components/UserProgressChart.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useUserValue } from '../UserContext';\nimport { Chart } from 'chart.js';\nimport workoutServices from '../services/workouts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserProgressChart = _ref => {\n  _s();\n  let {\n    targetMuscles\n  } = _ref;\n  const [filteredUserExercises, setFilteredUserExercises] = useState([]);\n  const [userExerciseClusters, setUserExerciseClusters] = useState([]);\n  useEffect(() => {\n    const fetchUserWorkouts = async () => {\n      const userExercisesTemp = await workoutServices.getUserWorkoutExercises();\n      setFilteredUserExercises(userExercisesTemp);\n    };\n    fetchUserWorkouts();\n  }, []);\n  useEffect(() => {\n    const exerciseChartData = {\n      labels: userExerciseClusters.map(cluster => cluster.createdAt),\n      datasets: [{\n        label: 'Reps',\n        data: userExerciseClusters.map(cluster => cluster.cluster),\n        backgroundColor: 'rgba(75, 192, 192, 0.2)',\n        borderColor: 'rgba(75, 192, 192, 1)',\n        borderWidth: 1\n      }]\n    };\n    const renderExerciseChart = () => {\n      const ctx = document.getElementById('userExerciseChart').getContext('2d');\n      new Chart(ctx, {\n        type: 'line',\n        data: exerciseChartData,\n        options: {\n          responsive: true,\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    };\n    renderExerciseChart();\n  }, [userExerciseClusters]);\n  const handleExerciseInputChange = async event => {\n    const userExerciseInputValue = event.target.value.toLowerCase();\n    const filteredUserExercisesTemp = userExercises.filter(exercise => exercise.toLowerCase().startsWith(userExerciseInputValue));\n    setFilteredUserExercises(filteredUserExercisesTemp);\n    if (filteredUerExercises.includes(userExerciseInputValue)) {\n      const userExerciseClustersTemp = await workoutServices.getUserClusters(userExerciseInputValue);\n      setUserExerciseClusters(userExerciseClustersTemp);\n    }\n  };\n  //TODO: get users clusters that contain an exercise for selected muscle group (1 cluster per workout for simplicity)\n  //also get the workout.createdAt parameter along with the cluster object (technically you just need the reps for this chart)\n  //Then create chart using workout.createdAt (x-axis) and, for now, cluster.reps (y-axis)\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"\",\n      children: \"Exercise: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      list: \"exercises-list\",\n      id: \"exercises\",\n      placeholder: \"Choose an exercise...\",\n      onChange: handleExerciseInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n      id: \"exercises-list\",\n      children: filteredUserExercises.map(exercise => /*#__PURE__*/_jsxDEV(\"option\", {\n        children: [\" \", exercise, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"exerciseProgressChart\",\n      width: \"400\",\n      height: \"400\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n_s(UserProgressChart, \"krlymN8fZaqrjJnduABQHrcGpgw=\");\n_c = UserProgressChart;\nexport default UserProgressChart;\nvar _c;\n$RefreshReg$(_c, \"UserProgressChart\");","map":{"version":3,"names":["useState","useEffect","useUserValue","Chart","workoutServices","jsxDEV","_jsxDEV","UserProgressChart","_ref","_s","targetMuscles","filteredUserExercises","setFilteredUserExercises","userExerciseClusters","setUserExerciseClusters","fetchUserWorkouts","userExercisesTemp","getUserWorkoutExercises","exerciseChartData","labels","map","cluster","createdAt","datasets","label","data","backgroundColor","borderColor","borderWidth","renderExerciseChart","ctx","document","getElementById","getContext","type","options","responsive","scales","y","beginAtZero","handleExerciseInputChange","event","userExerciseInputValue","target","value","toLowerCase","filteredUserExercisesTemp","userExercises","filter","exercise","startsWith","filteredUerExercises","includes","userExerciseClustersTemp","getUserClusters","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","list","id","placeholder","onChange","width","height","_c","$RefreshReg$"],"sources":["/Users/jasonramirez/Desktop/fitness-app/frontend/src/components/UserProgressChart.js"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport { useUserValue } from '../UserContext'\nimport { Chart } from 'chart.js'\nimport workoutServices from '../services/workouts'\n\nconst UserProgressChart = ( {targetMuscles} ) => {\n    const [filteredUserExercises, setFilteredUserExercises] = useState([])\n    const [userExerciseClusters, setUserExerciseClusters] = useState([])\n\n    useEffect(() => {\n        const fetchUserWorkouts = async () => {\n            const userExercisesTemp = await workoutServices.getUserWorkoutExercises()\n            setFilteredUserExercises(userExercisesTemp)\n        }\n        fetchUserWorkouts()\n    }, [])\n\n    useEffect(() => {\n        const exerciseChartData = {\n            labels: userExerciseClusters.map( cluster => cluster.createdAt),\n            datasets: [\n                {\n                    label: 'Reps',\n                    data: userExerciseClusters.map(cluster => cluster.cluster),\n                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 1,\n                }\n            ]\n        }\n\n        const renderExerciseChart = () => {\n            const ctx = document.getElementById('userExerciseChart').getContext('2d')\n            new Chart(ctx, {\n                type: 'line',\n                data: exerciseChartData,\n                options: {\n                    responsive: true,\n                    scales: {\n                        y: {\n                            beginAtZero: true,\n                        },\n                    }\n                }\n            })\n        }\n\n        renderExerciseChart()\n\n    }, [userExerciseClusters])\n\n    const handleExerciseInputChange = async (event) => {\n        const userExerciseInputValue = event.target.value.toLowerCase()\n        const filteredUserExercisesTemp = userExercises.filter( exercise => \n            exercise.toLowerCase().startsWith(userExerciseInputValue)\n        )\n        setFilteredUserExercises(filteredUserExercisesTemp)\n        if (filteredUerExercises.includes(userExerciseInputValue)) {\n            const userExerciseClustersTemp = await workoutServices.getUserClusters(userExerciseInputValue)\n            setUserExerciseClusters(userExerciseClustersTemp)\n        }\n    }\n    //TODO: get users clusters that contain an exercise for selected muscle group (1 cluster per workout for simplicity)\n    //also get the workout.createdAt parameter along with the cluster object (technically you just need the reps for this chart)\n    //Then create chart using workout.createdAt (x-axis) and, for now, cluster.reps (y-axis)\n    return (\n        <div>\n            <label htmlFor=\"\">Exercise: </label>\n            <input list=\"exercises-list\" id=\"exercises\" \n            placeholder='Choose an exercise...' onChange={handleExerciseInputChange}/>\n            <datalist id=\"exercises-list\">\n                {filteredUserExercises.map( exercise => (\n                    <option> {exercise} </option>\n                ))}\n            </datalist>\n            <canvas id=\"exerciseProgressChart\" width=\"400\" height=\"400\"></canvas>\n        </div>\n    )\n}\n\nexport default UserProgressChart"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}